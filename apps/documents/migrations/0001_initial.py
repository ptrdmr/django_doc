# Generated by Django 5.2.3 on 2025-07-15 04:01

import apps.documents.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        ('providers', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('filename', models.CharField(help_text='Original filename as uploaded', max_length=255)),
                ('file', models.FileField(help_text='Uploaded document file (PDF only)', upload_to=apps.documents.models.document_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf']), apps.documents.models.validate_file_size])),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Processing'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Processing Failed'), ('review', 'Needs Review')], db_index=True, default='pending', help_text='Current processing status', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='When document was uploaded')),
                ('processing_started_at', models.DateTimeField(blank=True, help_text='When AI processing started', null=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When processing completed', null=True)),
                ('original_text', models.TextField(blank=True, help_text='Extracted text from PDF')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('processing_attempts', models.PositiveIntegerField(default=0, help_text='Number of processing attempts')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this document')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(help_text='Patient this document belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='patients.patient')),
                ('providers', models.ManyToManyField(blank=True, help_text='Healthcare providers associated with this document', related_name='documents', to='providers.provider')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ParsedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('extraction_json', models.JSONField(default=dict, help_text='Raw extracted data from AI processing')),
                ('fhir_delta_json', models.JSONField(default=dict, help_text='FHIR resources extracted from this document')),
                ('ai_model_used', models.CharField(blank=True, help_text='AI model used for extraction (e.g., claude-3-sonnet)', max_length=100)),
                ('extraction_confidence', models.FloatField(blank=True, help_text='Confidence score for extraction (0.0-1.0)', null=True)),
                ('processing_time_seconds', models.FloatField(blank=True, help_text='Time taken for AI processing in seconds', null=True)),
                ('merged_at', models.DateTimeField(blank=True, help_text="When data was merged into patient's cumulative FHIR record", null=True)),
                ('is_merged', models.BooleanField(default=False, help_text='Whether data has been merged into patient record')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When data was reviewed', null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether extracted data is approved for merging')),
                ('extraction_quality_score', models.FloatField(blank=True, help_text='Quality score for extraction (0.0-1.0)', null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Notes from manual review')),
                ('corrections', models.JSONField(default=dict, help_text='Manual corrections to extracted data')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('document', models.OneToOneField(help_text='Source document for this parsed data', on_delete=django.db.models.deletion.CASCADE, related_name='parsed_data', to='documents.document')),
                ('patient', models.ForeignKey(help_text='Patient this data belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='parsed_data', to='patients.patient')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='User who reviewed this parsed data', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_parsed_data', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'parsed_data',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['patient', 'status'], name='documents_patient_39d766_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['status', 'uploaded_at'], name='documents_status_a3ecc5_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['uploaded_at'], name='documents_uploade_d6a956_idx'),
        ),
        migrations.AddIndex(
            model_name='parseddata',
            index=models.Index(fields=['patient', 'is_merged'], name='parsed_data_patient_9c5987_idx'),
        ),
        migrations.AddIndex(
            model_name='parseddata',
            index=models.Index(fields=['document', 'is_approved'], name='parsed_data_documen_57cc77_idx'),
        ),
        migrations.AddIndex(
            model_name='parseddata',
            index=models.Index(fields=['merged_at'], name='parsed_data_merged__95fda2_idx'),
        ),
    ]
