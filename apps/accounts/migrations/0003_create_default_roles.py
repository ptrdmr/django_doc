# Generated by Django 5.2.3 on 2025-08-27 20:17

import logging
from django.db import migrations
from django.contrib.auth.models import Permission, ContentType

logger = logging.getLogger(__name__)


def create_default_roles_forward(apps, schema_editor):
    """
    Create the four default healthcare roles for the medical document parser.
    
    Creates roles with appropriate permissions for healthcare environments:
    - Admin: Full system access
    - Provider: Patient records and document processing
    - Staff: Limited administrative access
    - Auditor: Read-only access to logs and reports
    """
    Role = apps.get_model('accounts', 'Role')
    
    # Define the four healthcare roles (permissions will be assigned in subtask 22.4)
    roles_data = [
        {
            'name': 'admin',
            'display_name': 'Administrator',
            'description': 'Full system access with all permissions. Can manage users, roles, and all patient data.',
            'is_system_role': True,
        },
        {
            'name': 'provider',
            'display_name': 'Healthcare Provider',
            'description': 'Healthcare provider with access to patient records and document processing. Can view and process medical documents.',
            'is_system_role': True,
        },
        {
            'name': 'staff',
            'display_name': 'Administrative Staff',
            'description': 'Administrative staff with limited access to patient information. Can assist with data entry but cannot access sensitive PHI.',
            'is_system_role': True,
        },
        {
            'name': 'auditor',
            'display_name': 'Auditor',
            'description': 'Read-only access to audit logs and system reports. Can monitor system activity and generate compliance reports.',
            'is_system_role': True,
        }
    ]
    
    logger.info(f"Creating {len(roles_data)} default healthcare roles")
    
    created_count = 0
    updated_count = 0
    
    for role_data in roles_data:
        role_name = role_data['name']
        
        try:
            # Create or update the role
            role, created = Role.objects.get_or_create(
                name=role_name,
                defaults=role_data
            )
            
            if created:
                created_count += 1
                logger.info(f"Created new role: {role.display_name}")
            else:
                # Update existing role with new data (except name)
                role.display_name = role_data['display_name']
                role.description = role_data['description']
                role.is_system_role = role_data['is_system_role']
                role.save()
                updated_count += 1
                logger.info(f"Updated existing role: {role.display_name}")
            
            logger.info(f"Role '{role.display_name}' ready. Permissions will be assigned in subtask 22.4")
            
        except Exception as e:
            logger.error(f"Error creating/updating role '{role_name}': {e}")
            continue
    
    logger.info(f"Default roles migration completed: {created_count} created, {updated_count} updated")


def create_default_roles_reverse(apps, schema_editor):
    """
    Remove the default system roles.
    
    Note: This will only remove system roles to avoid accidentally
    deleting custom roles created by administrators.
    """
    Role = apps.get_model('accounts', 'Role')
    
    system_role_names = ['admin', 'provider', 'staff', 'auditor']
    
    deleted_count = 0
    for role_name in system_role_names:
        try:
            role = Role.objects.get(name=role_name, is_system_role=True)
            role.delete()
            deleted_count += 1
            logger.info(f"Removed system role: {role_name}")
        except Role.DoesNotExist:
            logger.info(f"System role '{role_name}' not found (may have been manually deleted)")
            continue
        except Exception as e:
            logger.error(f"Error removing system role '{role_name}': {e}")
            continue
    
    logger.info(f"Reverse migration completed: {deleted_count} system roles removed")


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_add_user_profile_model'),
        ('contenttypes', '0002_remove_content_type_name'),  # Ensure content types exist
    ]

    operations = [
        migrations.RunPython(
            create_default_roles_forward,
            create_default_roles_reverse,
            hints={'accounts': ['Role']}
        ),
    ]
