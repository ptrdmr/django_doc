version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: meddocparser
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres123}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - meddocparser_network

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - meddocparser_network

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.development
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=meddocparser
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - DEBUG=1
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    networks:
      - meddocparser_network

  # Celery Worker for Document Processing
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.development
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=meddocparser
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - .:/app
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A meddocparser worker --loglevel=info --queues=document_processing,fhir_processing
    networks:
      - meddocparser_network

  # Celery Beat Scheduler (for periodic tasks)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.development
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=meddocparser
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-postgres123}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    volumes:
      - .:/app
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A meddocparser beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - meddocparser_network

  # Flower for Celery Monitoring (Development only)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.development
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A meddocparser flower --port=5555
    networks:
      - meddocparser_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:

networks:
  meddocparser_network:
    driver: bridge 