name: Comprehensive Pipeline Tests

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'apps/documents/**'
      - 'apps/fhir/**'
      - 'apps/patients/**'
      - 'apps/providers/**'
      - 'meddocparser/**'
      - 'requirements.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'apps/documents/**'
      - 'apps/fhir/**'
      - 'apps/patients/**'
      - 'apps/providers/**'
      - 'meddocparser/**'
      - 'requirements.txt'

env:
  DJANGO_SETTINGS_MODULE: meddocparser.settings.test
  ANTHROPIC_API_KEY: test-key-not-real
  OPENAI_API_KEY: test-key-not-real
  PERPLEXITY_API_KEY: test-key-not-real

jobs:
  test-matrix:
    name: Test Pipeline Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-category: [unit, integration, security]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpq-dev \
          postgresql-client \
          build-essential \
          python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist coverage pytest-cov
    
    - name: Run Django checks
      run: |
        python manage.py check --settings=meddocparser.settings.test
    
    - name: Run ${{ matrix.test-category }} tests
      run: |
        python run_comprehensive_tests.py --${{ matrix.test-category }} --coverage --verbose
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.test-category == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.test-category }}
        name: codecov-${{ matrix.test-category }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        python run_comprehensive_tests.py --performance --verbose
    
    - name: Store performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: .benchmarks/

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          chromium-browser \
          chromium-chromedriver \
          xvfb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium
    
    - name: Run UI tests
      run: |
        xvfb-run -a python run_comprehensive_tests.py --ui --verbose
      env:
        SELENIUM_WEBDRIVER: chrome
        SELENIUM_HEADLESS: true

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run end-to-end tests
      run: |
        python run_comprehensive_tests.py --e2e --verbose
      env:
        REDIS_URL: redis://localhost:6379/0

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test-matrix, performance-tests, ui-tests, end-to-end-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate comprehensive test report
      run: |
        python run_comprehensive_tests.py --report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          test-results.xml
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read test results if available
          let testSummary = '## üß™ Comprehensive Pipeline Test Results\n\n';
          
          try {
            // Check if coverage file exists
            if (fs.existsSync('coverage.xml')) {
              testSummary += '‚úÖ Coverage report generated\n';
            }
            
            // Check if test results exist
            if (fs.existsSync('test-results.xml')) {
              testSummary += '‚úÖ Test results available\n';
            }
            
            testSummary += '\nüìä Full test report artifacts uploaded to this workflow run.\n';
            testSummary += '\nüîó [View detailed coverage report](https://codecov.io/gh/' + context.repo.owner + '/' + context.repo.repo + ')';
            
          } catch (error) {
            testSummary += '‚ö†Ô∏è Error reading test results: ' + error.message;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          })

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install safety
      run: pip install safety bandit
    
    - name: Run safety check
      run: safety check -r requirements.txt
    
    - name: Run bandit security check
      run: bandit -r apps/ -f json -o bandit-results.json || true
    
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: bandit-results.json
