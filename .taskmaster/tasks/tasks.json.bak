{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Django Project Structure",
      "description": "Initialize the Django project with the proper app structure according to the PRD, including all required apps and basic configuration.",
      "details": "Create a new Django 5.0 project with the following structure:\n- Create main project folder 'meddocparser'\n- Setup settings module with base.py, development.py, and production.py\n- Create apps folder with the following Django apps:\n  - accounts (user auth & profiles)\n  - core (shared utilities)\n  - documents (document upload/processing)\n  - patients (patient management)\n  - providers (provider management)\n  - fhir (FHIR processing)\n  - reports (reporting module)\n- Setup static and template directories\n- Configure PostgreSQL with JSONB support\n- Setup Redis and Celery for async processing\n- Create docker-compose.yml and Dockerfile\n- Initialize requirements.txt with all dependencies listed in PRD\n- Configure Django settings for HIPAA compliance basics\n\nCode example for settings/base.py:\n```python\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'allauth',\n    'allauth.account',\n    'django_htmx',\n    'tailwind',\n    # Local apps\n    'apps.accounts',\n    'apps.core',\n    'apps.documents',\n    'apps.patients',\n    'apps.providers',\n    'apps.fhir',\n    'apps.reports',\n]\n```",
      "testStrategy": "Verify project structure is correct by running:\n- `python manage.py check` to ensure no errors\n- `python manage.py runserver` to verify server starts\n- Test database connection\n- Verify Celery worker connects to Redis\n- Run Docker Compose to ensure all services start correctly\n- Create a simple view to test the basic configuration",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Implement User Authentication and Home Page",
      "description": "Create the login flow and user home page (dashboard) with navigation to the four main modules as specified in the PRD.",
      "details": "Implement user authentication and home page:\n\n1. Setup django-allauth for authentication\n2. Create login page template with form\n3. Implement login view and authentication logic\n4. Create User Home Page (dashboard) with:\n   - Quick stats section (patients, providers, documents processed)\n   - Recent activity feed\n   - Four navigation cards to main modules (Document Parser, Patients & Providers, Reports, User Account Info)\n5. Implement breadcrumb navigation component\n6. Create base template with common elements\n7. Setup Tailwind CSS for styling\n8. Implement htmx for interactive elements\n\nExample home page template:\n```html\n{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-6\">Dashboard</h1>\n  \n  <!-- Quick Stats -->\n  <div class=\"grid grid-cols-3 gap-4 mb-8\">\n    <div class=\"bg-white p-4 rounded shadow\">\n      <h3 class=\"font-semibold\">Patients</h3>\n      <p class=\"text-3xl\">{{ patient_count }}</p>\n    </div>\n    <div class=\"bg-white p-4 rounded shadow\">\n      <h3 class=\"font-semibold\">Providers</h3>\n      <p class=\"text-3xl\">{{ provider_count }}</p>\n    </div>\n    <div class=\"bg-white p-4 rounded shadow\">\n      <h3 class=\"font-semibold\">Documents</h3>\n      <p class=\"text-3xl\">{{ document_count }}</p>\n    </div>\n  </div>\n  \n  <!-- Module Navigation Cards -->\n  <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n    <a href=\"{% url 'documents:upload' %}\" class=\"bg-blue-100 p-6 rounded-lg shadow hover:shadow-md transition\">\n      <h2 class=\"text-xl font-bold mb-2\">Document Parser</h2>\n      <p>Upload and process medical documents</p>\n    </a>\n    <a href=\"{% url 'patients:list' %}\" class=\"bg-green-100 p-6 rounded-lg shadow hover:shadow-md transition\">\n      <h2 class=\"text-xl font-bold mb-2\">Patients & Providers</h2>\n      <p>Manage patient and provider profiles</p>\n    </a>\n    <a href=\"{% url 'reports:dashboard' %}\" class=\"bg-yellow-100 p-6 rounded-lg shadow hover:shadow-md transition\">\n      <h2 class=\"text-xl font-bold mb-2\">Reports</h2>\n      <p>Generate and view reports</p>\n    </a>\n    <a href=\"{% url 'accounts:profile' %}\" class=\"bg-purple-100 p-6 rounded-lg shadow hover:shadow-md transition\">\n      <h2 class=\"text-xl font-bold mb-2\">User Account</h2>\n      <p>Manage your account settings</p>\n    </a>\n  </div>\n  \n  <!-- Recent Activity -->\n  <div class=\"mt-8\">\n    <h2 class=\"text-xl font-bold mb-4\">Recent Activity</h2>\n    <div class=\"bg-white rounded shadow p-4\">\n      {% if activities %}\n        <ul>\n          {% for activity in activities %}\n            <li class=\"py-2 border-b last:border-0\">{{ activity.description }} - {{ activity.timestamp|timesince }} ago</li>\n          {% endfor %}\n        </ul>\n      {% else %}\n        <p>No recent activity</p>\n      {% endif %}\n    </div>\n  </div>\n</div>\n{% endblock %}```",
      "testStrategy": "1. Test user registration and login flow\n2. Verify session creation and authentication\n3. Test redirect to dashboard after login\n4. Verify all navigation cards link to correct modules\n5. Test responsive design on different screen sizes\n6. Verify breadcrumb navigation works correctly\n7. Test quick stats display correct counts\n8. Verify recent activity feed shows actual activities",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Implement Patient Management Module",
      "description": "Create the patient management functionality including patient profiles with cumulative FHIR JSON storage, search, and history tracking.",
      "details": "Implement the patient management module:\n\n1. Create Patient model with fields as specified in PRD:\n```python\nclass Patient(models.Model):\n    mrn = models.CharField(max_length=50, unique=True)\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    dob = models.DateField()\n    cumulative_fhir_json = models.JSONField(default=dict)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"{self.last_name}, {self.first_name} (MRN: {self.mrn})\"\n    \n    def get_absolute_url(self):\n        return reverse('patients:detail', kwargs={'pk': self.pk})\n```\n\n2. Create PatientHistory model for tracking changes:\n```python\nclass PatientHistory(models.Model):\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    document = models.ForeignKey('documents.Document', on_delete=models.SET_NULL, null=True)\n    action = models.CharField(max_length=50)\n    fhir_version = models.CharField(max_length=20)\n    changed_at = models.DateTimeField(auto_now_add=True)\n    changed_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n```\n\n3. Implement views for:\n   - Patient list with search/filter\n   - Patient detail with FHIR history\n   - Patient create/edit forms\n   - Patient timeline view\n\n4. Create templates for patient management\n5. Implement patient search by name, DOB, MRN\n6. Create function to merge duplicate patient records\n7. Implement FHIR export functionality\n8. Setup URL patterns for patient module\n\nExample patient list view:\n```python\nclass PatientListView(LoginRequiredMixin, ListView):\n    model = Patient\n    template_name = 'patients/patient_list.html'\n    context_object_name = 'patients'\n    paginate_by = 20\n    \n    def get_queryset(self):\n        queryset = super().get_queryset()\n        search_query = self.request.GET.get('q', '')\n        \n        if search_query:\n            queryset = queryset.filter(\n                Q(first_name__icontains=search_query) |\n                Q(last_name__icontains=search_query) |\n                Q(mrn__icontains=search_query)\n            )\n            \n        return queryset\n```",
      "testStrategy": "1. Unit tests for Patient model methods\n2. Test patient creation with valid/invalid data\n3. Test patient search functionality with various criteria\n4. Test patient history tracking\n5. Verify FHIR JSON storage and retrieval\n6. Test patient merge functionality\n7. Verify patient timeline displays correctly\n8. Test FHIR export functionality\n9. Integration tests for patient workflow",
      "priority": "high",
      "dependencies": [
        1,
        2
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement Patient and PatientHistory models",
          "description": "Create the database models for Patient and PatientHistory with all required fields and relationships",
          "dependencies": [],
          "details": "Implement the Patient model with fields for mrn, first_name, last_name, dob, cumulative_fhir_json, created_at, and updated_at. Implement the PatientHistory model with fields for patient (ForeignKey), document (ForeignKey), action, fhir_version, changed_at, and changed_by. Include model methods like __str__ and get_absolute_url. Create and run migrations after implementation.",
          "status": "pending",
          "testStrategy": "Write unit tests to verify model creation, field validation, and relationship integrity. Test the __str__ method and get_absolute_url functionality."
        },
        {
          "id": 2,
          "title": "Create patient list and search functionality",
          "description": "Implement the patient list view with search and filtering capabilities",
          "dependencies": [
            1
          ],
          "details": "Create a PatientListView class that inherits from LoginRequiredMixin and ListView. Implement search functionality to filter patients by name, MRN, or DOB. Add pagination with 20 items per page. Create the corresponding template with a search form and results table. Implement sorting options for different columns.",
          "status": "pending",
          "testStrategy": "Test search functionality with various queries. Verify pagination works correctly. Test edge cases like empty search results and special characters in search terms."
        },
        {
          "id": 3,
          "title": "Implement patient detail view with FHIR history",
          "description": "Create the patient detail view showing patient information and FHIR history timeline",
          "dependencies": [
            1
          ],
          "details": "Implement a PatientDetailView that displays all patient information. Create a section to show the patient's FHIR history using the PatientHistory model. Display changes chronologically with information about who made the changes and when. Include functionality to view specific versions of the FHIR data. Create the corresponding template with appropriate styling.",
          "status": "pending",
          "testStrategy": "Test the detail view with patients having various history entries. Verify all patient information displays correctly. Test the history timeline with multiple entries."
        },
        {
          "id": 4,
          "title": "Create patient create/edit forms and views",
          "description": "Implement forms and views for creating new patients and editing existing patient records",
          "dependencies": [
            1
          ],
          "details": "Create a PatientForm class for patient data entry. Implement CreateView and UpdateView classes for handling patient creation and updates. Ensure that when a patient is updated, a new PatientHistory record is created to track the change. Add form validation for required fields and data formats. Create templates for the create and edit forms with appropriate styling and user feedback.",
          "status": "pending",
          "testStrategy": "Test form validation with valid and invalid data. Verify PatientHistory records are created on updates. Test the redirect flow after successful form submission."
        },
        {
          "id": 5,
          "title": "Implement URL patterns and integrate FHIR functionality",
          "description": "Set up URL routing for all patient views and implement FHIR export and duplicate patient merging",
          "dependencies": [
            2,
            3,
            4
          ],
          "details": "Create URL patterns for all patient views (list, detail, create, update). Implement a function to export patient data in FHIR format. Create a utility function to identify and merge duplicate patient records, ensuring proper handling of the cumulative_fhir_json field. Implement a view and form for the merge functionality. Update the navigation menu to include links to patient management features.",
          "status": "pending",
          "testStrategy": "Test all URL patterns to ensure they resolve correctly. Test FHIR export functionality with various patient data. Test the patient merge functionality with different scenarios of duplicate data."
        }
      ]
    },
    {
      "id": 4,
      "title": "Implement Provider Management Module",
      "description": "Create the provider management functionality including provider profiles, linking to patients and documents, and provider directory.",
      "details": "Implement the provider management module:\n\n1. Create Provider model with fields as specified in PRD:\n```python\nclass Provider(models.Model):\n    npi = models.CharField(max_length=10, unique=True, verbose_name=\"NPI Number\")\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    specialty = models.CharField(max_length=100)\n    organization = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    def __str__(self):\n        return f\"Dr. {self.first_name} {self.last_name} ({self.specialty})\"\n    \n    def get_absolute_url(self):\n        return reverse('providers:detail', kwargs={'pk': self.pk})\n        \n    def get_patients(self):\n        \"\"\"Return all patients linked to this provider through documents\"\"\"\n        return Patient.objects.filter(\n            documents__document_providers__provider=self\n        ).distinct()\n```\n\n2. Create DocumentProvider model for linking providers to documents:\n```python\nclass DocumentProvider(models.Model):\n    RELATIONSHIP_CHOICES = [\n        ('attending', 'Attending'),\n        ('consulting', 'Consulting'),\n        ('referring', 'Referring'),\n        ('other', 'Other'),\n    ]\n    \n    document = models.ForeignKey('documents.Document', on_delete=models.CASCADE)\n    provider = models.ForeignKey(Provider, on_delete=models.CASCADE)\n    relationship_type = models.CharField(max_length=20, choices=RELATIONSHIP_CHOICES)\n    \n    class Meta:\n        unique_together = ['document', 'provider']\n```\n\n3. Implement views for:\n   - Provider list with search/filter\n   - Provider detail showing linked patients\n   - Provider create/edit forms\n   - Provider directory with specialties\n\n4. Create templates for provider management\n5. Implement provider search functionality\n6. Create function to view all patients for a provider\n7. Setup URL patterns for provider module\n\nExample provider detail view:\n```python\nclass ProviderDetailView(LoginRequiredMixin, DetailView):\n    model = Provider\n    template_name = 'providers/provider_detail.html'\n    context_object_name = 'provider'\n    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['patients'] = self.object.get_patients()\n        context['documents'] = Document.objects.filter(\n            document_providers__provider=self.object\n        ).order_by('-uploaded_at')\n        return context\n```",
      "testStrategy": "1. Unit tests for Provider model methods\n2. Test provider creation with valid/invalid data\n3. Test provider search functionality\n4. Verify provider-patient relationships\n5. Test provider directory filtering\n6. Verify document-provider linking\n7. Test relationship type tracking\n8. Integration tests for provider workflow",
      "priority": "high",
      "dependencies": [
        1,
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement FHIR Data Structure and Management",
      "description": "Create the core FHIR data structure and management functionality for maintaining cumulative patient records.",
      "details": "Implement FHIR data structure and management:\n\n1. Create FHIR utility module with functions for:\n   - Creating initial FHIR patient bundle\n   - Adding new resources to existing bundle\n   - Handling resource versioning\n   - Deduplicating identical resources\n   - Maintaining resource provenance\n\n2. Implement the core FHIR resources as specified in PRD:\n   - Patient (master demographics)\n   - DocumentReference (all documents)\n   - Condition (cumulative diagnosis list)\n   - Observation (all labs/vitals over time)\n   - MedicationStatement (current med list)\n   - Practitioner (linked providers)\n\n3. Create FHIR validation functions using fhir.resources library\n\n4. Implement functions to generate patient summary from cumulative data\n\nExample FHIR utility functions:\n```python\nfrom fhir.resources.patient import Patient as FHIRPatient\nfrom fhir.resources.bundle import Bundle\nfrom fhir.resources.documentreference import DocumentReference\nfrom fhir.resources.condition import Condition\nfrom fhir.resources.observation import Observation\nfrom fhir.resources.medicationstatement import MedicationStatement\nfrom fhir.resources.practitioner import Practitioner\nimport uuid\n\ndef create_initial_patient_bundle(patient):\n    \"\"\"Create initial FHIR Bundle for a patient\"\"\"\n    # Create FHIR Patient resource\n    fhir_patient = FHIRPatient(\n        id=str(patient.id),\n        identifier=[{\n            \"system\": \"http://example.org/fhir/mrn\",\n            \"value\": patient.mrn\n        }],\n        name=[{\n            \"family\": patient.last_name,\n            \"given\": [patient.first_name]\n        }],\n        birthDate=patient.dob.isoformat()\n    )\n    \n    # Create Bundle with patient resource\n    bundle = Bundle(\n        type=\"collection\",\n        entry=[{\n            \"resource\": fhir_patient.dict()\n        }]\n    )\n    \n    return bundle.dict()\n\ndef add_resource_to_bundle(bundle_dict, resource_dict, resource_type):\n    \"\"\"Add a new resource to existing bundle, handling versioning\"\"\"\n    # Convert dict to Bundle if needed\n    if isinstance(bundle_dict, dict):\n        bundle = Bundle.parse_obj(bundle_dict)\n    else:\n        bundle = bundle_dict\n        \n    # Check if resource already exists (by id)\n    resource_id = resource_dict.get('id')\n    existing_entry = None\n    \n    if resource_id:\n        for entry in bundle.entry:\n            if entry.resource.get('resourceType') == resource_type and entry.resource.get('id') == resource_id:\n                existing_entry = entry\n                break\n    \n    # If resource exists, update with new version\n    if existing_entry:\n        # Increment version\n        current_version = int(existing_entry.resource.get('meta', {}).get('versionId', '0'))\n        new_version = str(current_version + 1)\n        \n        # Update meta\n        if 'meta' not in resource_dict:\n            resource_dict['meta'] = {}\n        resource_dict['meta']['versionId'] = new_version\n        \n        # Replace resource\n        existing_entry.resource = resource_dict\n    else:\n        # Add new resource\n        if 'id' not in resource_dict:\n            resource_dict['id'] = str(uuid.uuid4())\n            \n        if 'meta' not in resource_dict:\n            resource_dict['meta'] = {}\n        resource_dict['meta']['versionId'] = '1'\n        \n        bundle.entry.append({\"resource\": resource_dict})\n    \n    return bundle.dict()\n```",
      "testStrategy": "1. Unit tests for FHIR utility functions\n2. Test creating initial patient bundle\n3. Test adding new resources to bundle\n4. Verify resource versioning works correctly\n5. Test deduplication of identical resources\n6. Verify provenance tracking\n7. Test FHIR validation with valid/invalid resources\n8. Test generating patient summary from FHIR data",
      "priority": "high",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create Core FHIR Resource Models",
          "description": "Implement the core FHIR resource models using the fhir.resources library to represent patient data according to the FHIR specification.",
          "dependencies": [],
          "details": "Create Python classes for each required FHIR resource type (Patient, DocumentReference, Condition, Observation, MedicationStatement, Practitioner). Each class should extend the appropriate fhir.resources base class and implement any custom validation or helper methods needed for our specific implementation. Include proper type hints and docstrings for all classes and methods.",
          "status": "pending",
          "testStrategy": "Write unit tests for each resource model to verify proper initialization, validation, and serialization/deserialization. Test with both valid and invalid data to ensure validation works correctly."
        },
        {
          "id": 2,
          "title": "Implement Bundle Management Functions",
          "description": "Create utility functions for managing FHIR Bundles, including creating initial patient bundles and adding/updating resources within bundles.",
          "dependencies": [
            1
          ],
          "details": "Implement the create_initial_patient_bundle function to initialize a new Bundle with a Patient resource. Create add_resource_to_bundle function that handles adding new resources to an existing bundle with proper versioning. Implement get_resources_by_type to extract specific resource types from a bundle. All functions should handle proper FHIR structure, resource references, and maintain bundle integrity.",
          "status": "pending",
          "testStrategy": "Test bundle creation with various patient data. Verify that adding resources works correctly, including proper versioning when updating existing resources. Test extraction of resources by type to ensure correct filtering."
        },
        {
          "id": 3,
          "title": "Develop Resource Versioning and Deduplication",
          "description": "Implement functionality to handle resource versioning and deduplication to maintain data integrity within the FHIR bundle.",
          "dependencies": [
            2
          ],
          "details": "Create functions to detect and handle duplicate resources based on business rules (e.g., identical observations within a timeframe). Implement version management that maintains resource history while presenting the latest version by default. Include functions to compare resources for clinical equivalence beyond simple equality. Implement proper meta.versionId and meta.lastUpdated handling for all resources.",
          "status": "pending",
          "testStrategy": "Test with scenarios involving duplicate data entry, updates to existing resources, and conflicting information. Verify that the system correctly identifies duplicates and maintains appropriate version history."
        },
        {
          "id": 4,
          "title": "Implement Resource Provenance Tracking",
          "description": "Create functionality to track and maintain the provenance of all resources in the FHIR bundle, recording the origin and history of each data element.",
          "dependencies": [
            3
          ],
          "details": "Implement a system to create and maintain Provenance resources that link to each clinical resource, recording the source system, timestamp, and responsible party. Create functions to add provenance information when new resources are added to a bundle. Develop utilities to query and display provenance information for any resource. Ensure provenance chains remain intact during resource updates.",
          "status": "pending",
          "testStrategy": "Test provenance creation with various data sources. Verify that provenance chains correctly track the history of resources through multiple updates. Test querying provenance information for specific resources."
        },
        {
          "id": 5,
          "title": "Create Patient Summary Generation Functions",
          "description": "Develop functions to generate comprehensive patient summaries from the cumulative FHIR data, providing clinically relevant overviews of patient information.",
          "dependencies": [
            1,
            2,
            3,
            4
          ],
          "details": "Implement functions to extract and organize key clinical information from the FHIR bundle into a structured patient summary. Create specialized extractors for different clinical domains (problems, medications, labs, etc.). Develop functions to sort and prioritize information based on clinical relevance (e.g., recent vs. historical, active vs. resolved). Include options to filter summaries by date ranges, clinical domains, or other relevant criteria.",
          "status": "pending",
          "testStrategy": "Test summary generation with complex patient data containing multiple resource types. Verify that summaries correctly prioritize and organize information. Test filtering capabilities to ensure they produce appropriate subsets of data."
        }
      ]
    },
    {
      "id": 6,
      "title": "Implement Document Upload and Processing Infrastructure",
      "description": "Create the document upload interface and processing infrastructure with Celery for async processing.",
      "details": "Implement document upload and processing infrastructure:\n\n1. Create Document model:\n```python\nclass Document(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('processing', 'Processing'),\n        ('completed', 'Completed'),\n        ('failed', 'Failed'),\n    ]\n    \n    patient = models.ForeignKey('patients.Patient', on_delete=models.CASCADE, related_name='documents')\n    filename = models.CharField(max_length=255)\n    file = models.FileField(upload_to='documents/%Y/%m/%d/')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)\n    processed_at = models.DateTimeField(null=True, blank=True)\n    original_text = models.TextField(blank=True)\n    \n    def __str__(self):\n        return f\"{self.filename} - {self.patient}\"\n```\n\n2. Create ParsedData model:\n```python\nclass ParsedData(models.Model):\n    document = models.OneToOneField(Document, on_delete=models.CASCADE, related_name='parsed_data')\n    patient = models.ForeignKey('patients.Patient', on_delete=models.CASCADE)\n    extraction_json = models.JSONField(default=dict)  # Raw extracted data\n    fhir_delta_json = models.JSONField(default=dict)  # FHIR resources added by this doc\n    merged_at = models.DateTimeField(null=True, blank=True)\n    \n    def __str__(self):\n        return f\"Parsed data for {self.document}\"\n```\n\n3. Setup Celery task for document processing:\n```python\n@shared_task\ndef process_document(document_id):\n    document = Document.objects.get(id=document_id)\n    document.status = 'processing'\n    document.save(update_fields=['status'])\n    \n    try:\n        # Extract text from PDF\n        with open(document.file.path, 'rb') as f:\n            pdf = pdfplumber.open(f)\n            text = '\\n'.join(page.extract_text() for page in pdf.pages if page.extract_text())\n            document.original_text = text\n            document.save(update_fields=['original_text'])\n        \n        # Process with Claude API\n        extraction_result = process_with_claude(text, document.patient)\n        \n        # If Claude fails, try GPT fallback\n        if not extraction_result:\n            extraction_result = process_with_gpt(text, document.patient)\n        \n        # Create ParsedData object\n        parsed_data, created = ParsedData.objects.get_or_create(\n            document=document,\n            patient=document.patient,\n            defaults={\n                'extraction_json': extraction_result,\n                'fhir_delta_json': convert_to_fhir(extraction_result)\n            }\n        )\n        \n        # Update document status\n        document.status = 'completed'\n        document.processed_at = timezone.now()\n        document.save(update_fields=['status', 'processed_at'])\n        \n        return True\n    except Exception as e:\n        document.status = 'failed'\n        document.save(update_fields=['status'])\n        logger.error(f\"Error processing document {document_id}: {str(e)}\")\n        return False\n```\n\n4. Create document upload view and form\n5. Implement document-patient linking during upload\n6. Implement document-provider linking during upload\n7. Setup PDF processing with pdfplumber\n8. Create API integration with Claude 4 and GPT-3.5\n9. Implement duplicate document detection",
      "testStrategy": "1. Test document upload with valid/invalid files\n2. Verify PDF text extraction works correctly\n3. Test Celery task execution and error handling\n4. Mock API calls to Claude and GPT for testing\n5. Test document-patient linking\n6. Test document-provider linking\n7. Verify duplicate document detection\n8. Test processing status updates\n9. Integration tests for complete document processing workflow",
      "priority": "high",
      "dependencies": [
        1,
        2
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create Document and ParsedData models with migrations",
          "description": "Implement the Document and ParsedData models in the models.py file and create database migrations.",
          "dependencies": [],
          "details": "Create the Document model with fields for patient, file, status, etc. Create the ParsedData model with fields for document, patient, extraction_json, etc. Run makemigrations and migrate commands to update the database schema. Add admin.py registration for both models.",
          "status": "pending",
          "testStrategy": "Write unit tests to verify model creation, field validation, and relationship integrity between Document, ParsedData, and Patient models."
        },
        {
          "id": 2,
          "title": "Implement document upload form and view",
          "description": "Create a form and view for uploading documents and associating them with patients and providers.",
          "dependencies": [
            1
          ],
          "details": "Create a ModelForm for Document model. Implement a view that handles file upload, validates the file type (PDF), associates the document with the selected patient and the current user as uploader. Add duplicate detection by comparing file hashes or names for the same patient. Create templates for the upload form and success/error messages.",
          "status": "pending",
          "testStrategy": "Test form validation, file upload functionality, and proper association with patients and providers. Include tests for duplicate detection."
        },
        {
          "id": 3,
          "title": "Setup Celery configuration and task queue",
          "description": "Configure Celery with Redis/RabbitMQ for asynchronous task processing and implement the document processing task.",
          "dependencies": [
            1
          ],
          "details": "Install Celery and a message broker (Redis or RabbitMQ). Configure Celery in settings.py and create celery.py. Set up the process_document task that updates document status, extracts text from PDFs using pdfplumber, and handles errors appropriately. Implement task scheduling when a document is uploaded.",
          "status": "pending",
          "testStrategy": "Test Celery configuration with a simple task. Mock PDF processing to verify the task workflow and status updates."
        },
        {
          "id": 4,
          "title": "Implement PDF text extraction with pdfplumber",
          "description": "Create a service for extracting text content from uploaded PDF documents.",
          "dependencies": [
            3
          ],
          "details": "Install pdfplumber. Create a service function that takes a document path, extracts text from all pages, and handles potential errors like password-protected PDFs or corrupted files. Update the Celery task to use this service and store the extracted text in the Document model.",
          "status": "pending",
          "testStrategy": "Test with various PDF types (text-based, scanned with OCR, multi-page). Verify text extraction quality and error handling for corrupted files."
        },
        {
          "id": 5,
          "title": "Implement Claude and GPT API integration for document processing",
          "description": "Create services to process extracted document text with Claude 4 and GPT-3.5 APIs and store the results.",
          "dependencies": [
            4
          ],
          "details": "Implement process_with_claude and process_with_gpt functions that take document text and patient context, call the respective APIs with appropriate prompts, and parse the responses. Create the convert_to_fhir function to transform extracted data into FHIR resources. Update the Celery task to use these services, implement fallback logic, and store results in ParsedData model.",
          "status": "pending",
          "testStrategy": "Mock API responses to test successful processing and fallback logic. Verify proper storage of extraction results and FHIR conversion."
        }
      ]
    },
    {
      "id": 7,
      "title": "Implement AI Integration for Document Parsing",
      "description": "Integrate Claude 4 and GPT-3.5 APIs for medical document parsing with fallback mechanism and token optimization.",
      "details": "Implement AI integration for document parsing:\n\n1. Create AI service module with functions for:\n   - Claude 4 API integration (primary)\n   - GPT-3.5 API integration (fallback)\n   - Token counting and optimization\n   - Response caching\n   - Error handling and retries\n\n2. Implement prompt engineering for medical document extraction\n3. Create structured output format for extracted data\n4. Implement conversion from extracted data to FHIR resources\n5. Setup token usage tracking and cost monitoring\n\nExample AI service implementation:\n```python\nimport anthropic\nimport openai\nimport hashlib\nimport json\nfrom django.core.cache import cache\nfrom django.conf import settings\n\n# Initialize API clients\nanthropic_client = anthropic.Anthropic(api_key=settings.ANTHROPIC_API_KEY)\nopenai_client = openai.OpenAI(api_key=settings.OPENAI_API_KEY)\n\ndef count_tokens(text):\n    \"\"\"Estimate token count for text\"\"\"\n    # Simple estimation: ~4 chars per token\n    return len(text) // 4\n\ndef get_cache_key(text):\n    \"\"\"Generate cache key for text\"\"\"\n    return f\"ai_response:{hashlib.md5(text.encode()).hexdigest()}\"\n\ndef process_with_claude(text, patient):\n    \"\"\"Process document text with Claude 4\"\"\"\n    # Check cache first\n    cache_key = get_cache_key(text)\n    cached_result = cache.get(cache_key)\n    if cached_result:\n        return cached_result\n    \n    # Estimate token count\n    token_count = count_tokens(text)\n    if token_count > 200000:  # Claude 4 context limit\n        # Truncate or split text\n        text = text[:800000]  # ~200k tokens\n    \n    # Create prompt\n    system_prompt = f\"\"\"You are a medical document parser. Extract structured information from the following medical document for patient {patient.first_name} {patient.last_name} (DOB: {patient.dob.strftime('%Y-%m-%d')}).\n    \nExtract the following information in JSON format:\n1. Patient demographics (confirm they match the patient record)\n2. Document type and date\n3. Diagnoses/conditions with ICD codes if available\n4. Medications with dosage and frequency\n5. Lab results with values and reference ranges\n6. Vital signs\n7. Procedures performed\n8. Provider information (name, specialty, organization)\n\nReturn ONLY valid JSON with these keys.\"\"\"\n    \n    try:\n        # Call Claude API\n        response = anthropic_client.messages.create(\n            model=\"claude-3-sonnet-20240229\",\n            max_tokens=4000,\n            system=system_prompt,\n            messages=[\n                {\"role\": \"user\", \"content\": text}\n            ]\n        )\n        \n        # Parse JSON from response\n        content = response.content[0].text\n        # Extract JSON from content (handle potential markdown formatting)\n        json_str = content\n        if \"```json\" in content:\n            json_str = content.split(\"```json\")[1].split(\"```\")[0].strip()\n        \n        result = json.loads(json_str)\n        \n        # Cache result\n        cache.set(cache_key, result, 60*60*24*30)  # Cache for 30 days\n        \n        return result\n    except Exception as e:\n        logger.error(f\"Claude API error: {str(e)}\")\n        return None\n\ndef process_with_gpt(text, patient):\n    \"\"\"Process document text with GPT-3.5 (fallback)\"\"\"\n    # Similar implementation to Claude but using OpenAI API\n    # ...\n```",
      "testStrategy": "1. Unit tests for token counting function\n2. Test caching mechanism\n3. Mock API responses for testing\n4. Test error handling and retries\n5. Verify fallback mechanism works when Claude fails\n6. Test with various document types\n7. Verify structured output format\n8. Test conversion to FHIR resources\n9. Measure token usage and cost estimates",
      "priority": "medium",
      "dependencies": [
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Implement Document Review and FHIR Integration",
      "description": "Create the document review interface and integrate extracted data into patient's cumulative FHIR record.",
      "details": "Implement document review and FHIR integration:\n\n1. Create document review interface:\n   - Display extracted data in structured format\n   - Allow editing of extracted data\n   - Show patient's existing FHIR data for comparison\n   - Highlight potential conflicts or duplicates\n\n2. Implement FHIR integration process:\n   - Convert extracted data to FHIR resources\n   - Merge with patient's existing FHIR record\n   - Handle versioning and deduplication\n   - Track provenance (which document data came from)\n\n3. Create function to merge extracted data into patient record:\n```python\ndef merge_fhir_data(patient, parsed_data):\n    \"\"\"Merge extracted FHIR data into patient's cumulative record\"\"\"\n    # Get current patient FHIR data\n    current_fhir = patient.cumulative_fhir_json\n    \n    # If patient has no FHIR data yet, initialize it\n    if not current_fhir:\n        current_fhir = create_initial_patient_bundle(patient)\n    \n    # Get new FHIR resources from parsed data\n    new_resources = parsed_data.fhir_delta_json\n    \n    # Add each resource type to the bundle\n    for resource_type, resources in new_resources.items():\n        for resource in resources:\n            current_fhir = add_resource_to_bundle(current_fhir, resource, resource_type)\n    \n    # Update patient record\n    patient.cumulative_fhir_json = current_fhir\n    patient.save(update_fields=['cumulative_fhir_json'])\n    \n    # Update parsed data\n    parsed_data.merged_at = timezone.now()\n    parsed_data.save(update_fields=['merged_at'])\n    \n    # Create history entry\n    PatientHistory.objects.create(\n        patient=patient,\n        document=parsed_data.document,\n        action=\"merge_fhir_data\",\n        fhir_version=\"4.0.1\",\n        changed_by=parsed_data.document.uploaded_by\n    )\n    \n    return True\n```\n\n4. Create views for document review and approval\n5. Implement htmx for interactive editing\n6. Create templates for document review\n7. Implement document-provider relationship confirmation\n8. Setup URL patterns for document review\n\nExample document review view:\n```python\nclass DocumentReviewView(LoginRequiredMixin, DetailView):\n    model = Document\n    template_name = 'documents/document_review.html'\n    context_object_name = 'document'\n    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        document = self.object\n        \n        # Get parsed data\n        try:\n            parsed_data = document.parsed_data\n            context['extraction_data'] = parsed_data.extraction_json\n            context['fhir_delta'] = parsed_data.fhir_delta_json\n        except ParsedData.DoesNotExist:\n            context['extraction_data'] = {}\n            context['fhir_delta'] = {}\n        \n        # Get patient's current FHIR data\n        context['patient_fhir'] = document.patient.cumulative_fhir_json\n        \n        # Get providers linked to document\n        context['document_providers'] = DocumentProvider.objects.filter(document=document)\n        \n        # Get all providers for selection\n        context['all_providers'] = Provider.objects.all()\n        \n        return context\n    \n    def post(self, request, *args, **kwargs):\n        document = self.get_object()\n        \n        # Handle form submission\n        if 'approve' in request.POST:\n            # Get parsed data\n            parsed_data = document.parsed_data\n            \n            # Update extraction data if edited\n            if 'extraction_json' in request.POST:\n                try:\n                    extraction_json = json.loads(request.POST['extraction_json'])\n                    parsed_data.extraction_json = extraction_json\n                    parsed_data.fhir_delta_json = convert_to_fhir(extraction_json)\n                    parsed_data.save()\n                except json.JSONDecodeError:\n                    messages.error(request, \"Invalid JSON data\")\n                    return redirect('documents:review', pk=document.pk)\n            \n            # Merge data into patient record\n            merge_fhir_data(document.patient, parsed_data)\n            \n            messages.success(request, \"Document processed and added to patient record\")\n            return redirect('patients:detail', pk=document.patient.pk)\n        \n        return self.get(request, *args, **kwargs)\n```",
      "testStrategy": "1. Test document review interface\n2. Verify extracted data display\n3. Test editing functionality\n4. Verify FHIR integration process\n5. Test merging with existing patient data\n6. Verify versioning and deduplication\n7. Test provenance tracking\n8. Integration tests for complete review workflow",
      "priority": "medium",
      "dependencies": [
        5,
        6,
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Implement Reports Module",
      "description": "Create the reports module with patient summary, provider activity, and document processing reports.",
      "details": "Implement reports module:\n\n1. Create ReportGenerator base class:\n```python\nclass ReportGenerator:\n    \"\"\"Base class for report generation\"\"\"\n    def __init__(self, start_date=None, end_date=None, **filters):\n        self.start_date = start_date\n        self.end_date = end_date\n        self.filters = filters\n    \n    def generate(self):\n        \"\"\"Generate report data - to be implemented by subclasses\"\"\"\n        raise NotImplementedError\n    \n    def to_pdf(self, data):\n        \"\"\"Convert report data to PDF\"\"\"\n        # Implementation using a PDF library\n        pass\n    \n    def to_csv(self, data):\n        \"\"\"Convert report data to CSV\"\"\"\n        # Implementation using CSV module\n        pass\n```\n\n2. Implement specific report types:\n   - PatientSummaryReport\n   - ProviderActivityReport\n   - DocumentProcessingReport\n\n3. Create report views and forms:\n   - Report selection view\n   - Report parameter form\n   - Report display view\n   - Report download view\n\n4. Implement PDF generation for reports\n\nExample PatientSummaryReport implementation:\n```python\nclass PatientSummaryReport(ReportGenerator):\n    \"\"\"Generate patient summary report\"\"\"\n    def __init__(self, patient_id, **kwargs):\n        super().__init__(**kwargs)\n        self.patient_id = patient_id\n    \n    def generate(self):\n        \"\"\"Generate patient summary report\"\"\"\n        try:\n            patient = Patient.objects.get(id=self.patient_id)\n        except Patient.DoesNotExist:\n            return None\n        \n        # Get patient FHIR data\n        fhir_data = patient.cumulative_fhir_json\n        \n        # Extract summary information\n        summary = {\n            'patient': {\n                'name': f\"{patient.first_name} {patient.last_name}\",\n                'mrn': patient.mrn,\n                'dob': patient.dob.strftime('%Y-%m-%d'),\n            },\n            'documents': [],\n            'conditions': [],\n            'medications': [],\n            'observations': [],\n            'providers': []\n        }\n        \n        # Get documents\n        documents = Document.objects.filter(patient=patient)\n        for doc in documents:\n            summary['documents'].append({\n                'filename': doc.filename,\n                'uploaded_at': doc.uploaded_at.strftime('%Y-%m-%d'),\n                'status': doc.status,\n                'providers': [{\n                    'name': f\"Dr. {dp.provider.first_name} {dp.provider.last_name}\",\n                    'relationship': dp.relationship_type\n                } for dp in doc.document_providers.all()]\n            })\n        \n        # Extract FHIR resources\n        if fhir_data and 'entry' in fhir_data:\n            for entry in fhir_data['entry']:\n                resource = entry.get('resource', {})\n                resource_type = resource.get('resourceType')\n                \n                if resource_type == 'Condition':\n                    summary['conditions'].append({\n                        'code': resource.get('code', {}).get('text', 'Unknown'),\n                        'status': resource.get('clinicalStatus', {}).get('coding', [{}])[0].get('code', 'Unknown'),\n                        'onset': resource.get('onsetDateTime', 'Unknown'),\n                    })\n                elif resource_type == 'MedicationStatement':\n                    summary['medications'].append({\n                        'medication': resource.get('medicationCodeableConcept', {}).get('text', 'Unknown'),\n                        'status': resource.get('status', 'Unknown'),\n                        'dosage': resource.get('dosage', [{}])[0].get('text', 'Unknown'),\n                    })\n                # Add other resource types...\n        \n        return summary\n```\n\nExample report selection view:\n```python\nclass ReportSelectionView(LoginRequiredMixin, TemplateView):\n    template_name = 'reports/selection.html'\n    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['report_types'] = [\n            {\n                'id': 'patient_summary',\n                'name': 'Patient Summary Report',\n                'description': 'Comprehensive summary of patient medical history',\n                'url': reverse('reports:patient_summary_params')\n            },\n            {\n                'id': 'provider_activity',\n                'name': 'Provider Activity Report',\n                'description': 'Activity report for providers',\n                'url': reverse('reports:provider_activity_params')\n            },\n            {\n                'id': 'document_processing',\n                'name': 'Document Processing Report',\n                'description': 'Report on document processing status and metrics',\n                'url': reverse('reports:document_processing_params')\n            }\n        ]\n        return context\n```",
      "testStrategy": "1. Unit tests for report generator classes\n2. Test report generation with various parameters\n3. Verify PDF generation\n4. Test CSV export\n5. Test report views and forms\n6. Verify date range filtering\n7. Test with large datasets\n8. Verify report data accuracy\n9. Integration tests for report workflow",
      "priority": "medium",
      "dependencies": [
        3,
        4,
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Implement User Account Management",
      "description": "Create the user account management module with profile, preferences, and activity history.",
      "details": "Implement user account management:\n\n1. Extend Django User model with profile:\n```python\nclass UserProfile(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')\n    organization = models.CharField(max_length=200, blank=True)\n    job_title = models.CharField(max_length=100, blank=True)\n    phone = models.CharField(max_length=20, blank=True)\n    preferences = models.JSONField(default=dict)\n    \n    def __str__(self):\n        return f\"Profile for {self.user.username}\"\n```\n\n2. Create UserActivity model for tracking:\n```python\nclass UserActivity(models.Model):\n    ACTIVITY_TYPES = [\n        ('login', 'Login'),\n        ('logout', 'Logout'),\n        ('upload', 'Document Upload'),\n        ('process', 'Document Processing'),\n        ('patient', 'Patient Management'),\n        ('provider', 'Provider Management'),\n        ('report', 'Report Generation'),\n        ('account', 'Account Management'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='activities')\n    activity_type = models.CharField(max_length=20, choices=ACTIVITY_TYPES)\n    description = models.CharField(max_length=255)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    ip_address = models.GenericIPAddressField(null=True, blank=True)\n    related_object_type = models.CharField(max_length=50, blank=True)\n    related_object_id = models.PositiveIntegerField(null=True, blank=True)\n    \n    class Meta:\n        ordering = ['-timestamp']\n    \n    def __str__(self):\n        return f\"{self.user.username} - {self.activity_type} - {self.timestamp}\"\n```\n\n3. Create signal to create profile on user creation:\n```python\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=settings.AUTH_USER_MODEL)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n```\n\n4. Create middleware for tracking user activity:\n```python\nclass UserActivityMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    \n    def __call__(self, request):\n        response = self.get_response(request)\n        \n        # Only track authenticated users\n        if request.user.is_authenticated:\n            # Track certain activities based on request\n            if request.method == 'POST':\n                if '/documents/upload/' in request.path:\n                    self._record_activity(request, 'upload', 'Uploaded document')\n                elif '/patients/' in request.path and 'create' in request.path:\n                    self._record_activity(request, 'patient', 'Created patient')\n                # Add more activity tracking...\n        \n        return response\n    \n    def _record_activity(self, request, activity_type, description):\n        UserActivity.objects.create(\n            user=request.user,\n            activity_type=activity_type,\n            description=description,\n            ip_address=self._get_client_ip(request)\n        )\n    \n    def _get_client_ip(self, request):\n        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split(',')[0]\n        else:\n            ip = request.META.get('REMOTE_ADDR')\n        return ip\n```\n\n5. Implement views for:\n   - User profile view/edit\n   - Password change\n   - Preferences management\n   - Activity history view\n\n6. Create templates for user account management\n\nExample user profile view:\n```python\nclass UserProfileView(LoginRequiredMixin, UpdateView):\n    model = UserProfile\n    template_name = 'accounts/profile.html'\n    fields = ['organization', 'job_title', 'phone']\n    success_url = reverse_lazy('accounts:profile')\n    \n    def get_object(self, queryset=None):\n        return self.request.user.profile\n    \n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['recent_activities'] = UserActivity.objects.filter(\n            user=self.request.user\n        ).order_by('-timestamp')[:10]\n        return context\n```",
      "testStrategy": "1. Test user profile creation on user registration\n2. Test profile update functionality\n3. Verify password change works correctly\n4. Test preferences management\n5. Verify activity tracking middleware\n6. Test activity history display\n7. Test with multiple users\n8. Verify proper access controls",
      "priority": "low",
      "dependencies": [
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Implement Security and HIPAA Compliance Features",
      "description": "Implement security features and HIPAA compliance requirements including encryption, audit logging, and access controls.",
      "details": "Implement security and HIPAA compliance features:\n\n1. Configure Django security settings:\n```python\n# settings/base.py\nSECURITY_MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    # ...\n]\n\n# Security settings\nSECURE_SSL_REDIRECT = True\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSECURE_BROWSER_XSS_FILTER = True\nX_FRAME_OPTIONS = 'DENY'\n\n# Session settings\nSESSION_COOKIE_AGE = 3600  # 1 hour\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\nSESSION_SAVE_EVERY_REQUEST = True\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', 'OPTIONS': {'min_length': 12}},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n```\n\n2. Create AuditLog model for HIPAA compliance:\n```python\nclass AuditLog(models.Model):\n    ACTION_TYPES = [\n        ('create', 'Create'),\n        ('read', 'Read'),\n        ('update', 'Update'),\n        ('delete', 'Delete'),\n        ('export', 'Export'),\n        ('print', 'Print'),\n    ]\n    \n    RESOURCE_TYPES = [\n        ('patient', 'Patient'),\n        ('provider', 'Provider'),\n        ('document', 'Document'),\n        ('fhir', 'FHIR Data'),\n        ('report', 'Report'),\n        ('user', 'User'),\n    ]\n    \n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.PROTECT)\n    action = models.CharField(max_length=10, choices=ACTION_TYPES)\n    resource_type = models.CharField(max_length=20, choices=RESOURCE_TYPES)\n    resource_id = models.CharField(max_length=50)\n    timestamp = models.DateTimeField(auto_now_add=True)\n    ip_address = models.GenericIPAddressField()\n    user_agent = models.TextField()\n    details = models.JSONField(default=dict)\n    \n    class Meta:\n        ordering = ['-timestamp']\n        indexes = [\n            models.Index(fields=['user']),\n            models.Index(fields=['action']),\n            models.Index(fields=['resource_type']),\n            models.Index(fields=['timestamp']),\n        ]\n    \n    def __str__(self):\n        return f\"{self.user.username} {self.action} {self.resource_type} {self.resource_id}\"\n```\n\n3. Create audit logging middleware:\n```python\nclass AuditLogMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    \n    def __call__(self, request):\n        response = self.get_response(request)\n        \n        # Only audit authenticated requests\n        if not request.user.is_authenticated:\n            return response\n        \n        # Determine action type based on request method\n        action_map = {\n            'GET': 'read',\n            'POST': 'create',\n            'PUT': 'update',\n            'PATCH': 'update',\n            'DELETE': 'delete',\n        }\n        \n        action = action_map.get(request.method)\n        if not action:\n            return response\n        \n        # Determine resource type from URL path\n        resource_type = None\n        resource_id = None\n        \n        if '/patients/' in request.path:\n            resource_type = 'patient'\n            # Extract ID from URL if possible\n            match = re.search(r'/patients/(\\d+)', request.path)\n            if match:\n                resource_id = match.group(1)\n        elif '/providers/' in request.path:\n            resource_type = 'provider'\n            match = re.search(r'/providers/(\\d+)', request.path)\n            if match:\n                resource_id = match.group(1)\n        # Add other resource types...\n        \n        # Only log if we identified a resource type\n        if resource_type and action:\n            AuditLog.objects.create(\n                user=request.user,\n                action=action,\n                resource_type=resource_type,\n                resource_id=resource_id or 'unknown',\n                ip_address=self._get_client_ip(request),\n                user_agent=request.META.get('HTTP_USER_AGENT', ''),\n                details={\n                    'path': request.path,\n                    'method': request.method,\n                    'status_code': response.status_code,\n                }\n            )\n        \n        return response\n    \n    def _get_client_ip(self, request):\n        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')\n        if x_forwarded_for:\n            ip = x_forwarded_for.split(',')[0]\n        else:\n            ip = request.META.get('REMOTE_ADDR')\n        return ip\n```\n\n4. Implement field-level encryption for PHI:\n```python\nfrom cryptography.fernet import Fernet\n\nclass EncryptedTextField(models.TextField):\n    description = \"Encrypted text field\"\n    \n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    \n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        \n        # Encrypt value before saving to database\n        key = settings.ENCRYPTION_KEY.encode()\n        f = Fernet(key)\n        encrypted_value = f.encrypt(str(value).encode())\n        return encrypted_value.decode()\n    \n    def from_db_value(self, value, expression, connection):\n        if value is None:\n            return value\n        \n        # Decrypt value from database\n        key = settings.ENCRYPTION_KEY.encode()\n        f = Fernet(key)\n        decrypted_value = f.decrypt(value.encode())\n        return decrypted_value.decode()\n```\n\n5. Implement access controls and permissions\n6. Configure secure file storage for documents\n7. Setup automatic session timeout\n8. Implement IP-based access restrictions\n9. Create HIPAA compliance checklist view",
      "testStrategy": "1. Test security middleware configuration\n2. Verify SSL/TLS settings\n3. Test password validation rules\n4. Verify audit logging for all actions\n5. Test field-level encryption\n6. Verify secure file storage\n7. Test session timeout functionality\n8. Verify access controls and permissions\n9. Test IP-based restrictions\n10. Security penetration testing",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Implement UI Polish and Final Integration",
      "description": "Polish the user interface, implement final integration between modules, and prepare for deployment.",
      "details": "Implement UI polish and final integration:\n\n1. Refine Tailwind CSS styling:\n   - Create consistent color scheme\n   - Implement responsive design for all pages\n   - Create reusable UI components\n   - Optimize for mobile devices\n\n2. Enhance user experience:\n   - Add loading indicators for async operations\n   - Implement toast notifications for actions\n   - Add confirmation dialogs for critical actions\n   - Create inline help text and tooltips\n\n3. Optimize Alpine.js interactions:\n   - Implement client-side validation\n   - Create smooth transitions between states\n   - Enhance form interactions\n\n4. Improve htmx integration:\n   - Use hx-boost for faster page transitions\n   - Implement partial page updates\n   - Add progress indicators for long-running tasks\n\n5. Create comprehensive navigation:\n   - Implement breadcrumb navigation on all pages\n   - Add quick search functionality\n   - Create consistent header and footer\n\n6. Finalize module integration:\n   - Ensure proper flow between modules\n   - Verify all dependencies work correctly\n   - Test complete user workflows\n\n7. Prepare for deployment:\n   - Create deployment documentation\n   - Setup Docker Compose for production\n   - Configure Gunicorn and Nginx\n   - Setup database backup procedures\n\nExample base template with Tailwind and Alpine.js:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Medical Document Parser{% endblock %}</title>\n    <meta name=\"description\" content=\"HIPAA-compliant medical document parsing platform\">\n    <link rel=\"stylesheet\" href=\"{% static 'css/tailwind.css' %}\">\n    <script src=\"{% static 'js/alpine.min.js' %}\" defer></script>\n    <script src=\"{% static 'js/htmx.min.js' %}\" defer></script>\n</head>\n<body class=\"bg-gray-100 min-h-screen\" hx-boost=\"true\">\n    <div x-data=\"{ mobileMenuOpen: false }\">\n        <!-- Header -->\n        <header class=\"bg-white shadow\">\n            <div class=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n                <a href=\"{% url 'home' %}\" class=\"text-xl font-bold text-blue-600\">MedDocParser</a>\n                \n                <!-- Mobile menu button -->\n                <button @click=\"mobileMenuOpen = !mobileMenuOpen\" class=\"md:hidden\">\n                    <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16m-7 6h7\"></path>\n                    </svg>\n                </button>\n                \n                <!-- Desktop navigation -->\n                <nav class=\"hidden md:flex space-x-6\">\n                    <a href=\"{% url 'documents:upload' %}\" class=\"text-gray-700 hover:text-blue-600\">Document Parser</a>\n                    <a href=\"{% url 'patients:list' %}\" class=\"text-gray-700 hover:text-blue-600\">Patients & Providers</a>\n                    <a href=\"{% url 'reports:dashboard' %}\" class=\"text-gray-700 hover:text-blue-600\">Reports</a>\n                    <a href=\"{% url 'accounts:profile' %}\" class=\"text-gray-700 hover:text-blue-600\">Account</a>\n                </nav>\n                \n                <!-- User menu -->\n                <div class=\"hidden md:block\">\n                    {% if user.is_authenticated %}\n                        <div x-data=\"{ open: false }\" class=\"relative\">\n                            <button @click=\"open = !open\" class=\"flex items-center space-x-2\">\n                                <span>{{ user.get_full_name|default:user.username }}</span>\n                                <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\"></path>\n                                </svg>\n                            </button>\n                            <div x-show=\"open\" @click.away=\"open = false\" class=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1\">\n                                <a href=\"{% url 'accounts:profile' %}\" class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Profile</a>\n                                <a href=\"{% url 'accounts:password_change' %}\" class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Change Password</a>\n                                <a href=\"{% url 'logout' %}\" class=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Logout</a>\n                            </div>\n                        </div>\n                    {% else %}\n                        <a href=\"{% url 'login' %}\" class=\"text-blue-600 hover:text-blue-800\">Login</a>\n                    {% endif %}\n                </div>\n            </div>\n            \n            <!-- Mobile navigation -->\n            <div x-show=\"mobileMenuOpen\" class=\"md:hidden\">\n                <nav class=\"px-4 py-2 space-y-2\">\n                    <a href=\"{% url 'documents:upload' %}\" class=\"block text-gray-700 hover:text-blue-600\">Document Parser</a>\n                    <a href=\"{% url 'patients:list' %}\" class=\"block text-gray-700 hover:text-blue-600\">Patients & Providers</a>\n                    <a href=\"{% url 'reports:dashboard' %}\" class=\"block text-gray-700 hover:text-blue-600\">Reports</a>\n                    <a href=\"{% url 'accounts:profile' %}\" class=\"block text-gray-700 hover:text-blue-600\">Account</a>\n                    {% if user.is_authenticated %}\n                        <a href=\"{% url 'logout' %}\" class=\"block text-gray-700 hover:text-blue-600\">Logout</a>\n                    {% endif %}\n                </nav>\n            </div>\n        </header>\n        \n        <!-- Breadcrumbs -->\n        <div class=\"container mx-auto px-4 py-2\">\n            <nav class=\"text-sm\">\n                <ol class=\"list-none p-0 inline-flex\">\n                    <li class=\"flex items-center\">\n                        <a href=\"{% url 'home' %}\" class=\"text-blue-600 hover:text-blue-800\">Home</a>\n                        {% if breadcrumbs %}\n                            <svg class=\"w-3 h-3 mx-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"></path>\n                            </svg>\n                        {% endif %}\n                    </li>\n                    {% for breadcrumb in breadcrumbs %}\n                        <li class=\"flex items-center\">\n                            {% if not forloop.last %}\n                                <a href=\"{{ breadcrumb.url }}\" class=\"text-blue-600 hover:text-blue-800\">{{ breadcrumb.title }}</a>\n                                <svg class=\"w-3 h-3 mx-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fill-rule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clip-rule=\"evenodd\"></path>\n                                </svg>\n                            {% else %}\n                                <span class=\"text-gray-500\">{{ breadcrumb.title }}</span>\n                            {% endif %}\n                        </li>\n                    {% endfor %}\n                </ol>\n            </nav>\n        </div>\n        \n        <!-- Main content -->\n        <main class=\"container mx-auto px-4 py-4\">\n            <!-- Messages/Notifications -->\n            {% if messages %}\n                <div class=\"mb-4\">\n                    {% for message in messages %}\n                        <div class=\"p-4 mb-2 rounded {% if message.tags == 'error' %}bg-red-100 text-red-700{% elif message.tags == 'success' %}bg-green-100 text-green-700{% else %}bg-blue-100 text-blue-700{% endif %}\">\n                            {{ message }}\n                        </div>\n                    {% endfor %}\n                </div>\n            {% endif %}\n            \n            {% block content %}{% endblock %}\n        </main>\n        \n        <!-- Footer -->\n        <footer class=\"bg-white shadow-inner mt-8 py-4\">\n            <div class=\"container mx-auto px-4\">\n                <div class=\"flex flex-col md:flex-row justify-between items-center\">\n                    <div class=\"mb-4 md:mb-0\">\n                        <p class=\"text-gray-600\">&copy; 2025 Medical Document Parser. All rights reserved.</p>\n                    </div>\n                    <div class=\"flex space-x-4\">\n                        <a href=\"#\" class=\"text-gray-600 hover:text-blue-600\">Privacy Policy</a>\n                        <a href=\"#\" class=\"text-gray-600 hover:text-blue-600\">Terms of Service</a>\n                        <a href=\"#\" class=\"text-gray-600 hover:text-blue-600\">Help</a>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    </div>\n    \n    <!-- Toast notifications -->\n    <div id=\"toast-container\" class=\"fixed bottom-4 right-4 z-50\" x-data=\"{ toasts: [] }\" @notify.window=\"toasts.push($event.detail); setTimeout(() => { toasts.shift() }, 3000)\">\n        <template x-for=\"(toast, index) in toasts\" :key=\"index\">\n            <div class=\"bg-white shadow-lg rounded-lg p-4 mb-2 flex items-center\" x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0 transform translate-y-2\" x-transition:enter-end=\"opacity-100 transform translate-y-0\" x-transition:leave=\"transition ease-in duration-200\" x-transition:leave-start=\"opacity-100 transform translate-y-0\" x-transition:leave-end=\"opacity-0 transform translate-y-2\">\n                <div class=\"mr-2\" :class=\"{ 'text-green-500': toast.type === 'success', 'text-red-500': toast.type === 'error', 'text-blue-500': toast.type === 'info' }\">\n                    <svg x-show=\"toast.type === 'success'\" class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n                    </svg>\n                    <svg x-show=\"toast.type === 'error'\" class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n                    </svg>\n                    <svg x-show=\"toast.type === 'info'\" class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                    </svg>\n                </div>\n                <div x-text=\"toast.message\"></div>\n            </div>\n        </template>\n    </div>\n    \n    {% block extra_js %}{% endblock %}\n</body>\n</html>\n```",
      "testStrategy": "1. Test responsive design on various devices\n2. Verify consistent styling across all pages\n3. Test loading indicators and animations\n4. Verify toast notifications work correctly\n5. Test form validation and error handling\n6. Verify htmx partial updates work correctly\n7. Test complete user workflows end-to-end\n8. Verify navigation between modules\n9. Test deployment in staging environment\n10. Perform user acceptance testing",
      "priority": "medium",
      "dependencies": [
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}