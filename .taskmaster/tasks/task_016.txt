# Task ID: 16
# Title: Implement Patient Summary Reports
# Status: pending
# Dependencies: 14, 15
# Priority: medium
# Description: Create comprehensive patient summary reports that extract and organize all patient information from cumulative FHIR data, including medical history, current conditions, medications, timeline views, and provider relationships.
# Details:
Implement the Patient Summary Reports functionality:

1. Create specific report classes that extend the base report infrastructure:

```python
from reports.base import ReportGenerator
from fhir.resources import construct_fhir_element

class PatientSummaryReport(ReportGenerator):
    """Comprehensive patient summary report with all clinical data"""
    
    def __init__(self, patient, date_range=None):
        super().__init__(patient)
        self.date_range = date_range
        
    def generate(self):
        """Generate the complete patient summary report"""
        report_data = {
            'patient_info': self._get_patient_demographics(),
            'medical_history': self._get_medical_history(),
            'current_conditions': self._get_current_conditions(),
            'medications': self._get_medications(),
            'timeline': self._get_timeline_events(),
            'documents': self._get_document_summary(),
            'providers': self._get_provider_relationships(),
        }
        
        return self.format_report(report_data)
        
    def _get_patient_demographics(self):
        """Extract patient demographic information from FHIR Patient resource"""
        patient_resource = self._get_resource_by_type('Patient')[0]
        return {
            'name': f"{patient_resource.get('name', [{}])[0].get('given', [''])[0]} {patient_resource.get('name', [{}])[0].get('family', '')}",
            'dob': patient_resource.get('birthDate', ''),
            'gender': patient_resource.get('gender', ''),
            'mrn': self.patient.mrn,
            'contact': self._format_contact_info(patient_resource)
        }
    
    def _get_medical_history(self):
        """Extract patient medical history from Condition resources"""
        conditions = self._get_resource_by_type('Condition')
        if self.date_range:
            conditions = self._filter_by_date_range(conditions, 'recordedDate')
        
        return [self._format_condition(condition) for condition in conditions]
    
    def _get_current_conditions(self):
        """Extract active conditions from Condition resources"""
        conditions = self._get_resource_by_type('Condition')
        active_conditions = [c for c in conditions if c.get('clinicalStatus', {}).get('coding', [{}])[0].get('code') == 'active']
        
        return [self._format_condition(condition) for condition in active_conditions]
    
    def _get_medications(self):
        """Extract medication information from MedicationStatement resources"""
        medications = self._get_resource_by_type('MedicationStatement')
        if self.date_range:
            medications = self._filter_by_date_range(medications, 'effectiveDateTime')
            
        return [self._format_medication(med) for med in medications]
    
    def _get_timeline_events(self):
        """Create chronological timeline of all clinical events"""
        timeline = []
        
        # Add conditions to timeline
        for condition in self._get_resource_by_type('Condition'):
            if 'recordedDate' in condition:
                timeline.append({
                    'date': condition['recordedDate'],
                    'type': 'condition',
                    'description': condition.get('code', {}).get('text', 'Unknown condition'),
                    'details': condition
                })
        
        # Add medications to timeline
        for med in self._get_resource_by_type('MedicationStatement'):
            if 'effectiveDateTime' in med:
                timeline.append({
                    'date': med['effectiveDateTime'],
                    'type': 'medication',
                    'description': med.get('medicationCodeableConcept', {}).get('text', 'Unknown medication'),
                    'details': med
                })
        
        # Add procedures to timeline
        for procedure in self._get_resource_by_type('Procedure'):
            if 'performedDateTime' in procedure:
                timeline.append({
                    'date': procedure['performedDateTime'],
                    'type': 'procedure',
                    'description': procedure.get('code', {}).get('text', 'Unknown procedure'),
                    'details': procedure
                })
        
        # Add encounters to timeline
        for encounter in self._get_resource_by_type('Encounter'):
            if 'period' in encounter and 'start' in encounter['period']:
                timeline.append({
                    'date': encounter['period']['start'],
                    'type': 'encounter',
                    'description': encounter.get('type', [{}])[0].get('text', 'Unknown encounter'),
                    'details': encounter
                })
        
        # Sort timeline by date
        timeline.sort(key=lambda x: x['date'])
        
        if self.date_range:
            timeline = [event for event in timeline 
                       if self.date_range[0] <= event['date'] <= self.date_range[1]]
        
        return timeline
    
    def _get_document_summary(self):
        """Summarize documents associated with the patient"""
        documents = self.patient.documents.all()
        if self.date_range:
            documents = documents.filter(
                upload_date__gte=self.date_range[0],
                upload_date__lte=self.date_range[1]
            )
        
        return [{
            'id': doc.id,
            'title': doc.title,
            'type': doc.document_type,
            'date': doc.document_date,
            'provider': doc.provider.get_full_name() if doc.provider else 'Unknown',
            'status': doc.status
        } for doc in documents]
    
    def _get_provider_relationships(self):
        """Extract provider relationships from FHIR resources"""
        providers = {}
        
        # Get practitioners from various resources
        for resource_type in ['Encounter', 'Condition', 'MedicationStatement', 'Procedure']:
            for resource in self._get_resource_by_type(resource_type):
                if 'participant' in resource:
                    for participant in resource['participant']:
                        if 'individual' in participant and 'reference' in participant['individual']:
                            ref = participant['individual']['reference']
                            if ref.startswith('Practitioner/'):
                                practitioner_id = ref.split('/')[1]
                                if practitioner_id not in providers:
                                    # Find practitioner in FHIR resources
                                    practitioner = next(
                                        (p for p in self._get_resource_by_type('Practitioner') 
                                         if p.get('id') == practitioner_id), 
                                        None
                                    )
                                    if practitioner:
                                        providers[practitioner_id] = {
                                            'id': practitioner_id,
                                            'name': self._format_practitioner_name(practitioner),
                                            'specialty': self._get_practitioner_specialty(practitioner),
                                            'encounters': []
                                        }
                
                # Add encounter to provider's list
                if resource_type == 'Encounter' and 'id' in resource:
                    for participant in resource.get('participant', []):
                        if 'individual' in participant and 'reference' in participant['individual']:
                            ref = participant['individual']['reference']
                            if ref.startswith('Practitioner/'):
                                practitioner_id = ref.split('/')[1]
                                if practitioner_id in providers:
                                    providers[practitioner_id]['encounters'].append({
                                        'id': resource['id'],
                                        'date': resource.get('period', {}).get('start', ''),
                                        'type': resource.get('type', [{}])[0].get('text', 'Unknown')
                                    })
        
        return list(providers.values())
    
    def _get_resource_by_type(self, resource_type):
        """Extract resources of a specific type from the patient's FHIR bundle"""
        fhir_data = self.patient.cumulative_fhir_json
        resources = []
        
        if 'entry' in fhir_data:
            for entry in fhir_data['entry']:
                if 'resource' in entry and 'resourceType' in entry['resource']:
                    if entry['resource']['resourceType'] == resource_type:
                        resources.append(entry['resource'])
        
        return resources
    
    def _filter_by_date_range(self, resources, date_field):
        """Filter resources by date range"""
        if not self.date_range:
            return resources
            
        filtered = []
        for resource in resources:
            if date_field in resource:
                date_value = resource[date_field]
                if self.date_range[0] <= date_value <= self.date_range[1]:
                    filtered.append(resource)
        
        return filtered
    
    def _format_condition(self, condition):
        """Format a FHIR Condition resource for display"""
        return {
            'name': condition.get('code', {}).get('text', 'Unknown condition'),
            'status': condition.get('clinicalStatus', {}).get('coding', [{}])[0].get('code', 'unknown'),
            'onset': condition.get('onsetDateTime', ''),
            'recorded': condition.get('recordedDate', ''),
            'category': condition.get('category', [{}])[0].get('coding', [{}])[0].get('display', ''),
            'severity': condition.get('severity', {}).get('coding', [{}])[0].get('display', '')
        }
    
    def _format_medication(self, medication):
        """Format a FHIR MedicationStatement resource for display"""
        return {
            'name': medication.get('medicationCodeableConcept', {}).get('text', 'Unknown medication'),
            'status': medication.get('status', ''),
            'date': medication.get('effectiveDateTime', ''),
            'dosage': self._format_dosage(medication.get('dosage', [{}])[0]),
            'prescriber': self._get_prescriber_name(medication)
        }
    
    def _format_dosage(self, dosage):
        """Format medication dosage information"""
        if not dosage:
            return ''
            
        text = dosage.get('text', '')
        if text:
            return text
            
        # Build dosage string from components
        dose = dosage.get('doseAndRate', [{}])[0].get('doseQuantity', {})
        route = dosage.get('route', {}).get('coding', [{}])[0].get('display', '')
        frequency = dosage.get('timing', {}).get('repeat', {})
        
        dosage_str = []
        if dose:
            dosage_str.append(f"{dose.get('value', '')} {dose.get('unit', '')}")
        if route:
            dosage_str.append(f"via {route}")
        if frequency:
            period = frequency.get('period', '')
            period_unit = frequency.get('periodUnit', '')
            frequency_value = frequency.get('frequency', '')
            if frequency_value and period and period_unit:
                dosage_str.append(f"{frequency_value} times per {period} {period_unit}")
        
        return ' '.join(dosage_str) or 'No dosage information'
```

2. Create the report views and templates:

```python
# reports/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.http import HttpResponse
from django.contrib.auth.decorators import login_required
from django.views.generic import DetailView, ListView
from django.utils.decorators import method_decorator

from patients.models import Patient
from .reports import PatientSummaryReport
from .utils import generate_pdf, generate_csv

@method_decorator(login_required, name='dispatch')
class PatientReportView(DetailView):
    model = Patient
    template_name = 'reports/patient_summary.html'
    context_object_name = 'patient'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Get date range parameters
        start_date = self.request.GET.get('start_date')
        end_date = self.request.GET.get('end_date')
        date_range = None
        if start_date and end_date:
            date_range = (start_date, end_date)
        
        # Generate report
        patient = self.get_object()
        report_generator = PatientSummaryReport(patient, date_range)
        report_data = report_generator.generate()
        
        context['report'] = report_data
        context['date_range'] = date_range
        return context

@login_required
def export_patient_report(request, pk, format='pdf'):
    """Export patient report in PDF or CSV format"""
    patient = get_object_or_404(Patient, pk=pk)
    
    # Get date range parameters
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    date_range = None
    if start_date and end_date:
        date_range = (start_date, end_date)
    
    # Generate report
    report_generator = PatientSummaryReport(patient, date_range)
    report_data = report_generator.generate()
    
    # Export in requested format
    if format.lower() == 'pdf':
        response = HttpResponse(content_type='application/pdf')
        response['Content-Disposition'] = f'attachment; filename="patient_{patient.id}_summary.pdf"'
        generate_pdf(report_data, response)
        return response
    elif format.lower() == 'csv':
        response = HttpResponse(content_type='text/csv')
        response['Content-Disposition'] = f'attachment; filename="patient_{patient.id}_summary.csv"'
        generate_csv(report_data, response)
        return response
    else:
        return redirect('patient_report', pk=patient.pk)
```

3. Create HTML templates for the report:

```html
<!-- reports/templates/reports/patient_summary.html -->
{% extends "base.html" %}

{% block content %}
<div class="report-container">
    <div class="report-header">
        <h1>Patient Summary Report</h1>
        <div class="patient-info">
            <h2>{{ report.patient_info.name }}</h2>
            <p>MRN: {{ report.patient_info.mrn }}</p>
            <p>DOB: {{ report.patient_info.dob }}</p>
            <p>Gender: {{ report.patient_info.gender }}</p>
        </div>
        
        <div class="report-actions">
            <form method="get" class="date-filter-form">
                <div class="form-group">
                    <label for="start_date">Start Date:</label>
                    <input type="date" id="start_date" name="start_date" value="{{ date_range.0|default:'' }}">
                </div>
                <div class="form-group">
                    <label for="end_date">End Date:</label>
                    <input type="date" id="end_date" name="end_date" value="{{ date_range.1|default:'' }}">
                </div>
                <button type="submit" class="btn btn-primary">Filter</button>
            </form>
            
            <div class="export-options">
                <a href="{% url 'export_patient_report' patient.id %}?format=pdf{% if date_range %}&start_date={{ date_range.0 }}&end_date={{ date_range.1 }}{% endif %}" class="btn btn-secondary">
                    Export as PDF
                </a>
                <a href="{% url 'export_patient_report' patient.id %}?format=csv{% if date_range %}&start_date={{ date_range.0 }}&end_date={{ date_range.1 }}{% endif %}" class="btn btn-secondary">
                    Export as CSV
                </a>
            </div>
        </div>
    </div>
    
    <div class="report-sections">
        <!-- Current Conditions Section -->
        <section class="report-section">
            <h3>Current Conditions</h3>
            <div class="section-content">
                {% if report.current_conditions %}
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Condition</th>
                                <th>Status</th>
                                <th>Onset</th>
                                <th>Severity</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for condition in report.current_conditions %}
                            <tr>
                                <td>{{ condition.name }}</td>
                                <td>{{ condition.status }}</td>
                                <td>{{ condition.onset }}</td>
                                <td>{{ condition.severity }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>No current conditions found.</p>
                {% endif %}
            </div>
        </section>
        
        <!-- Medications Section -->
        <section class="report-section">
            <h3>Medications</h3>
            <div class="section-content">
                {% if report.medications %}
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Medication</th>
                                <th>Status</th>
                                <th>Dosage</th>
                                <th>Prescriber</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for medication in report.medications %}
                            <tr>
                                <td>{{ medication.name }}</td>
                                <td>{{ medication.status }}</td>
                                <td>{{ medication.dosage }}</td>
                                <td>{{ medication.prescriber }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>No medications found.</p>
                {% endif %}
            </div>
        </section>
        
        <!-- Timeline Section -->
        <section class="report-section">
            <h3>Clinical Timeline</h3>
            <div class="section-content timeline">
                {% if report.timeline %}
                    <ul class="timeline-list">
                        {% for event in report.timeline %}
                        <li class="timeline-item {{ event.type }}">
                            <div class="timeline-date">{{ event.date }}</div>
                            <div class="timeline-content">
                                <span class="timeline-type">{{ event.type|title }}</span>
                                <span class="timeline-description">{{ event.description }}</span>
                            </div>
                        </li>
                        {% endfor %}
                    </ul>
                {% else %}
                    <p>No timeline events found.</p>
                {% endif %}
            </div>
        </section>
        
        <!-- Medical History Section -->
        <section class="report-section">
            <h3>Medical History</h3>
            <div class="section-content">
                {% if report.medical_history %}
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Condition</th>
                                <th>Category</th>
                                <th>Onset</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for condition in report.medical_history %}
                            <tr>
                                <td>{{ condition.name }}</td>
                                <td>{{ condition.category }}</td>
                                <td>{{ condition.onset }}</td>
                                <td>{{ condition.status }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>No medical history found.</p>
                {% endif %}
            </div>
        </section>
        
        <!-- Documents Section -->
        <section class="report-section">
            <h3>Document Summary</h3>
            <div class="section-content">
                {% if report.documents %}
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Type</th>
                                <th>Date</th>
                                <th>Provider</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for doc in report.documents %}
                            <tr>
                                <td>{{ doc.title }}</td>
                                <td>{{ doc.type }}</td>
                                <td>{{ doc.date }}</td>
                                <td>{{ doc.provider }}</td>
                                <td>{{ doc.status }}</td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>No documents found.</p>
                {% endif %}
            </div>
        </section>
        
        <!-- Provider Relationships Section -->
        <section class="report-section">
            <h3>Provider Relationships</h3>
            <div class="section-content">
                {% if report.providers %}
                    <div class="providers-list">
                        {% for provider in report.providers %}
                        <div class="provider-card">
                            <h4>{{ provider.name }}</h4>
                            <p>Specialty: {{ provider.specialty }}</p>
                            <h5>Encounters:</h5>
                            <ul>
                                {% for encounter in provider.encounters %}
                                <li>{{ encounter.date }} - {{ encounter.type }}</li>
                                {% empty %}
                                <li>No encounters recorded</li>
                                {% endfor %}
                            </ul>
                        </div>
                        {% endfor %}
                    </div>
                {% else %}
                    <p>No provider relationships found.</p>
                {% endif %}
            </div>
        </section>
    </div>
</div>
{% endblock %}
```

4. Add URL patterns for the report views:

```python
# reports/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('patient/<int:pk>/', views.PatientReportView.as_view(), name='patient_report'),
    path('patient/<int:pk>/export/', views.export_patient_report, name='export_patient_report'),
]
```

5. Add CSS styles for the report:

```css
/* reports/static/css/reports.css */
.report-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.report-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 1px solid #ddd;
}

.report-actions {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.date-filter-form {
    display: flex;
    gap: 10px;
    align-items: flex-end;
}

.export-options {
    display: flex;
    gap: 10px;
}

.report-section {
    margin-bottom: 30px;
    border: 1px solid #eee;
    border-radius: 5px;
    overflow: hidden;
}

.report-section h3 {
    padding: 15px;
    margin: 0;
    background-color: #f8f9fa;
    border-bottom: 1px solid #eee;
}

.section-content {
    padding: 15px;
}

.timeline-list {
    list-style: none;
    padding: 0;
    position: relative;
}

.timeline-list:before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 120px;
    width: 2px;
    background: #ddd;
}

.timeline-item {
    position: relative;
    margin-bottom: 20px;
    padding-left: 150px;
}

.timeline-date {
    position: absolute;
    left: 0;
    width: 100px;
    text-align: right;
    font-weight: bold;
}

.timeline-content {
    padding: 10px;
    background: #f8f9fa;
    border-radius: 5px;
    border-left: 4px solid #007bff;
}

.timeline-item.condition .timeline-content {
    border-left-color: #dc3545;
}

.timeline-item.medication .timeline-content {
    border-left-color: #28a745;
}

.timeline-item.procedure .timeline-content {
    border-left-color: #fd7e14;
}

.timeline-item.encounter .timeline-content {
    border-left-color: #6f42c1;
}

.timeline-type {
    font-weight: bold;
    margin-right: 10px;
}

.providers-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
}

.provider-card {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 15px;
}
```

6. Implement PDF and CSV generation utilities:

```python
# reports/utils.py
import csv
from io import StringIO
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

def generate_pdf(report_data, response):
    """Generate PDF from report data"""
    doc = SimpleDocTemplate(response, pagesize=letter)
    styles = getSampleStyleSheet()
    elements = []
    
    # Add title
    title_style = styles['Heading1']
    elements.append(Paragraph("Patient Summary Report", title_style))
    elements.append(Spacer(1, 0.25*inch))
    
    # Add patient info
    patient_info = report_data['patient_info']
    patient_style = styles['Normal']
    elements.append(Paragraph(f"<b>Name:</b> {patient_info['name']}", patient_style))
    elements.append(Paragraph(f"<b>MRN:</b> {patient_info['mrn']}", patient_style))
    elements.append(Paragraph(f"<b>DOB:</b> {patient_info['dob']}", patient_style))
    elements.append(Paragraph(f"<b>Gender:</b> {patient_info['gender']}", patient_style))
    elements.append(Spacer(1, 0.25*inch))
    
    # Add current conditions
    elements.append(Paragraph("Current Conditions", styles['Heading2']))
    if report_data['current_conditions']:
        condition_data = [['Condition', 'Status', 'Onset', 'Severity']]
        for condition in report_data['current_conditions']:
            condition_data.append([
                condition['name'],
                condition['status'],
                condition['onset'],
                condition['severity']
            ])
        
        condition_table = Table(condition_data, colWidths=[2.5*inch, 1*inch, 1.5*inch, 1.5*inch])
        condition_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        elements.append(condition_table)
    else:
        elements.append(Paragraph("No current conditions found.", styles['Normal']))
    
    elements.append(Spacer(1, 0.25*inch))
    
    # Add medications
    elements.append(Paragraph("Medications", styles['Heading2']))
    if report_data['medications']:
        med_data = [['Medication', 'Status', 'Dosage', 'Prescriber']]
        for med in report_data['medications']:
            med_data.append([
                med['name'],
                med['status'],
                med['dosage'],
                med['prescriber']
            ])
        
        med_table = Table(med_data, colWidths=[2*inch, 1*inch, 2.5*inch, 1*inch])
        med_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        elements.append(med_table)
    else:
        elements.append(Paragraph("No medications found.", styles['Normal']))
    
    elements.append(Spacer(1, 0.25*inch))
    
    # Add timeline
    elements.append(Paragraph("Clinical Timeline", styles['Heading2']))
    if report_data['timeline']:
        timeline_data = [['Date', 'Type', 'Description']]
        for event in report_data['timeline']:
            timeline_data.append([
                event['date'],
                event['type'].title(),
                event['description']
            ])
        
        timeline_table = Table(timeline_data, colWidths=[1.5*inch, 1*inch, 4*inch])
        timeline_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        elements.append(timeline_table)
    else:
        elements.append(Paragraph("No timeline events found.", styles['Normal']))
    
    # Build the PDF
    doc.build(elements)

def generate_csv(report_data, response):
    """Generate CSV from report data"""
    writer = csv.writer(response)
    
    # Write patient info
    writer.writerow(['Patient Summary Report'])
    writer.writerow([])
    writer.writerow(['Patient Information'])
    writer.writerow(['Name', 'MRN', 'DOB', 'Gender'])
    writer.writerow([
        report_data['patient_info']['name'],
        report_data['patient_info']['mrn'],
        report_data['patient_info']['dob'],
        report_data['patient_info']['gender']
    ])
    writer.writerow([])
    
    # Write current conditions
    writer.writerow(['Current Conditions'])
    if report_data['current_conditions']:
        writer.writerow(['Condition', 'Status', 'Onset', 'Severity'])
        for condition in report_data['current_conditions']:
            writer.writerow([
                condition['name'],
                condition['status'],
                condition['onset'],
                condition['severity']
            ])
    else:
        writer.writerow(['No current conditions found.'])
    writer.writerow([])
    
    # Write medications
    writer.writerow(['Medications'])
    if report_data['medications']:
        writer.writerow(['Medication', 'Status', 'Dosage', 'Prescriber'])
        for med in report_data['medications']:
            writer.writerow([
                med['name'],
                med['status'],
                med['dosage'],
                med['prescriber']
            ])
    else:
        writer.writerow(['No medications found.'])
    writer.writerow([])
    
    # Write timeline
    writer.writerow(['Clinical Timeline'])
    if report_data['timeline']:
        writer.writerow(['Date', 'Type', 'Description'])
        for event in report_data['timeline']:
            writer.writerow([
                event['date'],
                event['type'].title(),
                event['description']
            ])
    else:
        writer.writerow(['No timeline events found.'])
    writer.writerow([])
    
    # Write medical history
    writer.writerow(['Medical History'])
    if report_data['medical_history']:
        writer.writerow(['Condition', 'Category', 'Onset', 'Status'])
        for condition in report_data['medical_history']:
            writer.writerow([
                condition['name'],
                condition['category'],
                condition['onset'],
                condition['status']
            ])
    else:
        writer.writerow(['No medical history found.'])
    writer.writerow([])
    
    # Write documents
    writer.writerow(['Document Summary'])
    if report_data['documents']:
        writer.writerow(['Title', 'Type', 'Date', 'Provider', 'Status'])
        for doc in report_data['documents']:
            writer.writerow([
                doc['title'],
                doc['type'],
                doc['date'],
                doc['provider'],
                doc['status']
            ])
    else:
        writer.writerow(['No documents found.'])

# Test Strategy:
To verify the correct implementation of the Patient Summary Reports functionality, follow these testing steps:

1. Unit Testing:
   - Create unit tests for the PatientSummaryReport class:
     ```python
     # reports/tests.py
     from django.test import TestCase
     from patients.models import Patient
     from reports.reports import PatientSummaryReport
     import json
     
     class PatientSummaryReportTests(TestCase):
         def setUp(self):
             # Create test patient with sample FHIR data
             self.patient = Patient.objects.create(
                 mrn="TEST12345",
                 first_name="Test",
                 last_name="Patient",
                 dob="1980-01-01"
             )
             
             # Load sample FHIR bundle from fixture
             with open('reports/fixtures/test_fhir_bundle.json', 'r') as f:
                 self.patient.cumulative_fhir_json = json.load(f)
                 self.patient.save()
         
         def test_report_generation(self):
             """Test that report generates with all required sections"""
             report = PatientSummaryReport(self.patient)
             result = report.generate()
             
             # Verify all sections are present
             self.assertIn('patient_info', result)
             self.assertIn('medical_history', result)
             self.assertIn('current_conditions', result)
             self.assertIn('medications', result)
             self.assertIn('timeline', result)
             self.assertIn('documents', result)
             self.assertIn('providers', result)
             
             # Verify patient info is correct
             self.assertEqual(result['patient_info']['mrn'], self.patient.mrn)
         
         def test_date_range_filtering(self):
             """Test that date range filtering works correctly"""
             # Create report with date range
             date_range = ('2022-01-01', '2022-12-31')
             report = PatientSummaryReport(self.patient, date_range)
             result = report.generate()
             
             # Verify timeline events are within date range
             for event in result['timeline']:
                 self.assertTrue(date_range[0] <= event['date'] <= date_range[1])
     ```

2. Integration Testing:
   - Test the report view with a real patient record:
     ```python
     def test_patient_report_view(self):
         """Test that patient report view renders correctly"""
         # Login as test user
         self.client.login(username='testuser', password='testpassword')
         
         # Access report page
         response = self.client.get(f'/reports/patient/{self.patient.id}/')
         
         # Verify response
         self.assertEqual(response.status_code, 200)
         self.assertTemplateUsed(response, 'reports/patient_summary.html')
         self.assertContains(response, 'Patient Summary Report')
         self.assertContains(response, self.patient.first_name)
         
     def test_pdf_export(self):
         """Test PDF export functionality"""
         # Login as test user
         self.client.login(username='testuser', password='testpassword')
         
         # Request PDF export
         response = self.client.get(f'/reports/patient/{self.patient.id}/export/?format=pdf')
         
         # Verify response
         self.assertEqual(response.status_code, 200)
         self.assertEqual(response['Content-Type'], 'application/pdf')
         self.assertIn(f'attachment; filename="patient_{self.patient.id}_summary.pdf"', 
                      response['Content-Disposition'])
     ```

3. Manual Testing:
   - Create a test fixture with comprehensive FHIR data covering all resource types
   - Test the report with patients having varying amounts of data:
     - Patient with extensive medical history
     - Patient with minimal data
     - Patient with no data
   - Verify date range filtering:
     - Apply different date ranges and verify only relevant data appears
     - Test with invalid date ranges
   - Test export functionality:
     - Export to PDF and verify all sections are included
     - Export to CSV and verify data integrity
     - Verify large reports handle pagination correctly in PDF

4. UI/UX Testing:
   - Verify the report renders correctly on different screen sizes
   - Test the date range picker functionality
   - Verify all sections expand/collapse correctly
   - Check that timeline visualization is clear and chronological
   - Verify that provider relationships are displayed correctly

5. Performance Testing:
   - Test report generation with large FHIR datasets (1000+ resources)
   - Measure and optimize report generation time
   - Verify PDF generation doesn't timeout with large datasets

6. Edge Case Testing:
   - Test with malformed FHIR data
   - Test with missing required FHIR elements
   - Test with extremely long text fields
   - Test with special characters in patient/provider names

7. Acceptance Criteria Verification:
   - Verify all required report sections are present and populated correctly
   - Confirm date range filtering works as expected
   - Verify PDF and CSV exports contain all relevant data
   - Ensure timeline view correctly orders events chronologically
   - Confirm provider relationships are accurately represented
   - Verify all formatting requirements are met
