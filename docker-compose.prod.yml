version: '3.8'

services:
  # PostgreSQL Database - Production Configuration
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meddocparser_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis - Production Configuration
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - meddocparser_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Django Web Application - Production
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.production
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DEBUG=0
      - SECURE_SSL_REDIRECT=1
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --timeout 120 --access-logfile /app/logs/gunicorn_access.log --error-logfile /app/logs/gunicorn_error.log meddocparser.wsgi:application"
    networks:
      - meddocparser_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      replicas: 2

  # Celery Worker - Production
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.production
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A meddocparser worker --loglevel=warning --queues=document_processing,fhir_processing --concurrency=2 --max-tasks-per-child=1000
    networks:
      - meddocparser_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
      replicas: 2

  # Celery Beat Scheduler - Production
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=meddocparser.settings.production
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A meddocparser beat --loglevel=warning --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - meddocparser_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy - Production
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/staticfiles:ro
      - media_volume:/var/www/media:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - meddocparser_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  meddocparser_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 